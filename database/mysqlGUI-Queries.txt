/* liefert alle Accounts mit richtiger Kategorie-Orts Kombination */
CREATE TEMPORARY TABLE final (val int PRIMARY KEY);
INSERT IGNORE INTO final (val) SELECT accounts.Id FROM accountCategory JOIN accounts ON accountCategory.AccountId=accounts.Id WHERE (CategoryId=1) AND (LocationId=1);

/* über alle Accounts aufsummiert */

/* liefert Summe der Tweets */
SELECT SUM(Counter) FROM tweets JOIN final ON tweets.AccountId=final.val;

/* liefert Summe der Retweets pro Land */
SELECT SUM(Counter), LocationId, Code FROM retweets JOIN final ON retweets.AccountId=final.val JOIN location ON retweets.LocationId=location.Id GROUP BY LocationId;

/* liefert Summe der Tweets pro Datum */
SELECT SUM(Counter), Day FROM tweets JOIN final ON tweets.AccountId=final.val JOIN day ON tweets.DayId=day.Id GROUP BY DayId;

/* liefert Summe der Retweets pro Land pro Datum */
SELECT SUM(Counter), LocationId, Code, Day FROM retweets JOIN final ON retweets.AccountId=final.val JOIN day ON retweets.DayId=day.Id JOIN location ON retweets.LocationId=location.Id GROUP BY LocationId, DayId;

/* Daten pro Account */

/* liefert Summe der Tweets pro Accounts */
SELECT SUM(Counter),AccountName, tweets.AccountId FROM tweets JOIN final ON tweets.AccountId=final.val JOIN accounts ON final.val=accounts.Id GROUP BY AccountId;

/* liefert Summe der Retweets pro Land pro Account*/
SELECT SUM(Counter),retweets.LocationId, AccountId, Code FROM retweets JOIN final ON retweets.AccountId=final.val JOIN location ON retweets.LocationId=location.Id GROUP BY AccountId;

/* liefert Summe der Tweets pro Datum pro Account */
SELECT Counter, AccountName, tweets.AccountId, Day FROM tweets JOIN final ON tweets.AccountId=final.val JOIN day ON tweets.DayId=day.Id JOIN accounts ON final.val=accounts.Id;

/* liefert Summe der Retweets pro Land pro Datum pro Account */
SELECT Counter, retweets.LocationId, AccountId, Code, Day FROM retweets JOIN final ON retweets.AccountId=final.val JOIN day ON retweets.DayId=day.Id JOIN location ON retweets.LocationId=location.Id;